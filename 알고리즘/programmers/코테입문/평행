'''
문제 설명
점 네 개의 좌표를 담은 이차원 배열  dots가 다음과 같이 매개변수로 주어집니다.

[[x1, y1], [x2, y2], [x3, y3], [x4, y4]]
주어진 네 개의 점을 두 개씩 이었을 때, 
두 직선이 평행이 되는 경우가 있으면 1을 없으면 0을 return 하도록 
solution 함수를 완성해보세요.

제한사항
dots의 길이 = 4
dots의 원소는 [x, y] 형태이며 x, y는 정수입니다.
0 ≤ x, y ≤ 100
서로 다른 두개 이상의 점이 겹치는 경우는 없습니다.
두 직선이 겹치는 경우(일치하는 경우)에도 1을 return 해주세요.
임의의 두 점을 이은 직선이 x축 또는 y축과 평행한 경우는 주어지지 않습니다.

입출력 예
dots	result
[[1, 4], [9, 2], [3, 8], [11, 6]]	1
[[3, 5], [4, 1], [2, 4], [5, 10]]	0
'''

from itertools import combinations
def gradient(a,b):
    return (a[1] -b[1])/(a[0]-b[0])

def solution(dots):
    temp = set()
    for d1, d2, d3, d4 in combinations(dots, 4):
        if gradient(d3, d1) == gradient(d2, d4):
            return 1
        if gradient(d4, d3) == gradient(d2, d1):
            return 1
    return 0


# def solution(dots):
#     temp = {}
#     for d1, d2 in combinations(dots, 2):
#         x = d1[0]-d2[0]
#         y = d1[1]-d1[1]
#         if x == 0:
#             temp[x] = temp.get(x, 0)+1
#         else:
#             temp[y/x] = temp.get(y/x, 0)+1
#     for k in temp:
#         if temp[k] > 1:
#             return 1
#     return 0

'''
from itertools import combinations
from fractions import Fraction
def solution(dots):
    temp = set()
    for d1, d2 in combinations(dots, 2):
        inclination = Fraction(d1[1]- d2[1], d1[0]-d2[0])
        if inclination in temp:
            return 1
        temp.add(inclination)
    return 0
'''
