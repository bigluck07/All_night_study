'''
시간 제한	메모리 제한	
1 초	    256 MB	

문제
소수나라는 특이하게 모든 소수(prime number)를 화폐 단위로 사용한다.

소수나라에 놀러 온 하나는 관광을 하다가 가격이 N인 물건을 발견하고 너무 마음에 들어 999983원을 내고 구매하려고 했다. 
하지만 상점 주인이 거스름돈이 없어 정확히 N원을 지불해달라고 하였다.

물건을 구매하려던 하나는 소수나라의 화폐를 이용하여 N원을 정확히 만들 수 있는 방법의 가짓수가 얼마나 되는지 궁금해졌다.
하나를 도와 N원을 지불하기 위한 가짓수가 얼마나 되는지 구해보자.
단, 하나는 소수나라의 모든 화폐가 무한정 있다고 가정한다.

입력
구매하려고하는 물건의 값 N(2 ≤ N ≤ 40,000, N은 정수)이 주어진다.

출력
소수나라의 화폐를 이용하여 지불할 수 있는 방법의 수를 출력한다.
단, 지불할 수 있는 방법의 수가 매우 크기때문에 123,456,789로 나눈 나머지 값을 출력한다.

예제 입력 1 
8
예제 출력 1 
3

힌트
8원짜리 물건은 아래와 같이 3가지 방법으로 구할 수 있다.

1. 2원 4개
2. 2원 1개, 3원 2개
3. 3원 1개, 5원 1개

소수
1보다 큰 자연수 중 1과 자기 자신만을 약수로 가지는 수
'''


import sys, math

n  = int(sys.stdin.readline().strip())
prime_num = [] # 소수 집합
def check_prime(num):
    for i in range(2, int(math.sqrt(num))+1): # 제곱근까지 확인
        if num % i == 0: # 입력받은 값 외에 나눠 떨어지면 소수 아님
            return False 
    return True

for i in range(2, n+1):
    if check_prime(i):
        prime_num.append(i)

dp = [0 for _ in range(n+1)] # 입력받은 값이 가질 수 있는 소수조합의 수 집합(인덱스로 입력받은 값 접근가능)
dp[0] = 1
for pn in prime_num:
    for i in range(pn, n+1):
        dp[i] = (dp[i] + dp[i-pn]) % 123456789 # 배수에 1씩 넣어주며, 소수+소수의 조합이 가능하면 해당 수를 또 넣어줌

print(dp[n])